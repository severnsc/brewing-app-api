{"version":3,"sources":["../../schema/index.js"],"names":["RootQuery","Mutation","SchemaDefinition","typeDefs","resolvers"],"mappings":";;;;;;AAAA;;AAEA;;AAQA;;;;;;AAEA,IAAMA,6FAAN;;AAOA,IAAMC,8tDAAN;;AA0BA,IAAMC,uFAAN;;kBAOe,wCAAqB;AAClCC,YAAU,CACRD,gBADQ,EAERF,SAFQ,EAGRC,QAHQ,sGADwB;AAWlCG;AAXkC,CAArB,C","file":"index.js","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools'\n\nimport {\n  Inventory,\n  InventoryItem,\n  Timer,\n  TimerAlert,\n  User\n} from './typedefs'\n\nimport resolvers from './resolvers'\n\nconst RootQuery = `\n  type RootQuery {\n    user(id: String!): User\n    currentUser: User\n  }\n`\n\nconst Mutation = `\n  type Mutation {\n    createUser(userName: String!, password: String!): User\n    updateUser(id: String!, userName: String, password: String): User\n    authenticateUser(userName: String!, password: String!): User\n    deleteUser(id: String!): User\n    createInventory(name: String!, userId: String!): Inventory\n    updateInventory(id: String!, name: String!): Inventory\n    deleteInventory(id: String!): Inventory\n    createInventoryItem(inventoryId: String!, object: String!, quantityUnit: String!, currentQuantity: Float!, reorderQuantity: Float!, reorderThreshold: Float!, costUnit: String!, unitCost: Float!, reorderCost: Float!, lastReorderDate: String, deliveryDate: String, createdAt: String!, updatedAt: String!): InventoryItem\n    updateInventoryItem(id: String!, inventoryId: String, object: String, quantityUnit: String, currentQuantity: Float, reorderQuantity: Float, reorderThreshold: Float, costUnit: String, unitCost: Float, reorderCost: Float, lastReorderDate: String, deliveryDate: String): InventoryItem\n    deleteInventoryItem(id: String!): Inventory\n    createTimer(userId: String!, name: String!, duration: Int!, intervalDuration: Int!): Timer\n    startTimer(id: String!): Timer\n    stopTimer(id: String!): Timer\n    decrementTimer(id: String!): Timer\n    resetTimer(id: String!): Timer\n    updateTimer(id: String!, name: String, duration: Int, intervalDuration: Int): Timer\n    deleteTimer(id: String!): Timer\n    createTimerAlert(timerId: String!, activationTime: Int!, message: String!): TimerAlert\n    updateTimerAlert(id: String!, timerId: String, activationTime: Int, message: String): TimerAlert\n    activateTimerAlert(id: String!): TimerAlert\n    deleteTimerAlert(id: String!): TimerAlert\n  }\n`\n\nconst SchemaDefinition = `\n  schema {\n    query: RootQuery,\n    mutation: Mutation\n  }\n`\n\nexport default makeExecutableSchema({\n  typeDefs: [\n    SchemaDefinition,\n    RootQuery,\n    Mutation,\n    Inventory,\n    InventoryItem,\n    Timer,\n    TimerAlert,\n    User\n  ],\n  resolvers\n})"]}