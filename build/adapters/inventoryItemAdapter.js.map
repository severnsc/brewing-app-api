{"version":3,"sources":["../../adapters/inventoryItemAdapter.js"],"names":["_createInventoryItem","addToInventory","findInventoryItemById","saveInventoryItem","_deleteInventoryItem","process","env","NODE_ENV","id","inventoryId","object","JSON","stringify","name","random","word","quantityUnit","currentQuantity","number","reorderQuantity","reorderThreshold","costUnit","unitCost","reorderCost","lastReorderDate","date","past","toUTCString","deliveryDate","future","createdAt","updatedAt","console","log","inventoryItem","inventory","items"],"mappings":"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","file":"inventoryItemAdapter.js","sourcesContent":["import faker from 'faker'\n\nimport {\n  find,\n  findOne,\n  insertOne,\n  updateOne,\n  deleteOne\n} from './databaseAdapter'\n\nimport { getInventory, updateInventory } from '../compose'\n\nlet _createInventoryItem\nlet addToInventory\nlet findInventoryItemById\nlet saveInventoryItem\nlet _deleteInventoryItem\n\nif(process.env.NODE_ENV === 'dev'){\n  _createInventoryItem = () => {}\n\n  addToInventory = () => {}\n\n  findInventoryItemById = id => ({\n    id,\n    inventoryId: \"1\", \n    object: JSON.stringify({name:faker.random.word()}),\n    quantityUnit: \"lbs\",\n    currentQuantity: faker.random.number(),\n    reorderQuantity: faker.random.number(),\n    reorderThreshold: faker.random.number(),\n    costUnit: \"USD\",\n    unitCost: faker.random.number(),\n    reorderCost: faker.random.number(),\n    lastReorderDate: faker.date.past().toUTCString(),\n    deliveryDate: faker.date.future().toUTCString(),\n    createdAt: faker.date.past().toUTCString(),\n    updatedAt: faker.date.past().toUTCString()\n  })\n\n  saveInventoryItem = inventoryItem => console.log(inventoryItem)\n\n  _deleteInventoryItem = () => {}\n}else{\n  _createInventoryItem = async inventoryItem => {\n    insertOne(inventoryItem)\n  }\n\n  addToInventory = async inventoryItem => {\n    const inventoryId = inventoryItem.inventoryId\n    const inventory = await getInventory(inventoryId)\n    await updateInventory(inventoryId, {items: [...inventory.items, inventoryItem]})\n  }\n\n  findInventoryItemById = async id => {\n    const inventoryItem = await find('inventoryItems', {id})\n    return inventoryItem\n  }\n\n  saveInventoryItem = async inventoryItem => {\n    updateOne(\"inventoryItems\", {id: inventoryItem.id}, inventoryItem)\n  }\n\n  _deleteInventoryItem = async id => {\n    deleteOne(\"inventoryItems\", id)\n  }\n}\n\nexport {_createInventoryItem}\nexport {addToInventory}\nexport {findInventoryItemById}\nexport {saveInventoryItem}\nexport {_deleteInventoryItem}"]}