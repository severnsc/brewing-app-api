{"version":3,"sources":["../../adapters/tokenAdapter.js"],"names":["generateResetToken","hashToken","salt","genSaltSync","hash","hashSync","token","saveResetHash","email","url","doc","callbackURL","expires","Date","now","then","console","log","catch","e","findHash","docs","find","compareSync","deleteResetHash"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,kDAAqB,SAArBA,kBAAqB,GAAM;AACtC,SAAO,kBAAP;AACD,CAFM;;AAIA,IAAMC,gCAAY,SAAZA,SAAY,QAAS;AAChC,MAAMC,OAAO,iBAAOC,WAAP,CAAmB,EAAnB,CAAb;AACA,MAAMC,OAAO,iBAAOC,QAAP,CAAgBC,KAAhB,EAAuBJ,IAAvB,CAAb;AACA,SAAOE,IAAP;AACD,CAJM;;AAMA,IAAMG;AAAA,qEAAgB,iBAAOC,KAAP,EAAcJ,IAAd,EAAoBK,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B;AACMC,eAFqB,GAEf,EAACF,YAAD,EAAQJ,UAAR,EAAcO,aAAaF,GAA3B,EAAgCG,SAASC,KAAKC,GAAL,KAAc,IAAI,EAAJ,GAAS,EAAT,GAAc,IAArE,EAFe;;AAG3B,4CAAU,aAAV,EAAyBJ,GAAzB,EAA8BK,IAA9B,CAAmC,YAAM;AACvCC,sBAAQC,GAAR,CAAY,QAAZ;AACD,aAFD,EAEGC,KAFH,CAES;AAAA,qBAAKC,CAAL;AAAA,aAFT;;AAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQA,IAAMC;AAAA,sEAAW,kBAAMd,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,2BAAK,aAAL,EAAoB,EAApB,CADG;;AAAA;AAChBe,gBADgB;AAEhBX,eAFgB,GAEVW,KAAKC,IAAL,CAAU;AAAA,qBAAO,iBAAOC,WAAP,CAAmBjB,KAAnB,EAA0BI,IAAIN,IAA9B,CAAP;AAAA,aAAV,CAFU;AAAA,8CAGfM,GAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAMA,IAAMc;AAAA,sEAAkB,kBAAMlB,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACV,2BAAK,aAAL,EAAoB,EAApB,CADU;;AAAA;AACvBe,gBADuB;AAEvBX,eAFuB,GAEjBW,KAAKC,IAAL,CAAU;AAAA,qBAAO,iBAAOC,WAAP,CAAmBjB,KAAnB,EAA0BI,IAAIN,IAA9B,CAAP;AAAA,aAAV,CAFiB;AAAA;AAAA,mBAGvB,wCAAkB,aAAlB,EAAiCM,GAAjC,EAAsCQ,KAAtC,CAA4C;AAAA,qBAAKC,CAAL;AAAA,aAA5C,CAHuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"tokenAdapter.js","sourcesContent":["import bcrypt from 'bcrypt'\nimport uuidv4 from 'uuid/v4'\nimport { find, deleteOneByObject, insertOne } from './databaseAdapter'\n\nexport const generateResetToken = () => {\n  return uuidv4()\n}\n\nexport const hashToken = token => {\n  const salt = bcrypt.genSaltSync(10)\n  const hash = bcrypt.hashSync(token, salt)\n  return hash\n}\n\nexport const saveResetHash = async (email, hash, url) => {\n  //Expires in 2 hours\n  const doc = {email, hash, callbackURL: url, expires: Date.now() + (2 * 60 * 60 * 1000)}\n  insertOne(\"resetTokens\", doc).then(() => {\n    console.log(\"saved!\")\n  }).catch(e => e)\n}\n\nexport const findHash = async token => {\n  const docs = await find(\"resetTokens\", {})\n  const doc = docs.find(doc => bcrypt.compareSync(token, doc.hash))\n  return doc\n}\n\nexport const deleteResetHash = async token => {\n  const docs = await find(\"resetTokens\", {})\n  const doc = docs.find(doc => bcrypt.compareSync(token, doc.hash))\n  await deleteOneByObject(\"resetTokens\", doc).catch(e => e)\n}"]}