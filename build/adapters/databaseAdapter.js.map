{"version":3,"sources":["../../adapters/databaseAdapter.js"],"names":["url","process","env","DB_URL","db","dbConnection","connect","then","console","log","client","cb","catch","e","findOne","collectionName","searchObj","collection","doc","find","toArray","docs","insertOne","err","r","Error","insertedCount","updateOne","filter","updateObj","$set","deleteOne","id","deleteOneByObject","object","deletedCount"],"mappings":"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","file":"databaseAdapter.js","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst url = process.env.DB_URL\nlet db\n\nexport const dbConnection = cb => {\n  MongoClient.connect(url).then(client => {\n    console.log(\"Connected to database!\")\n    db = client.db(\"brewing-app-db\")\n    cb()\n  }).catch(e => e)\n}\n\nexport const findOne = async (collectionName, searchObj) => {\n  const collection = db.collection(collectionName)\n  const doc = await collection.findOne(searchObj)\n  return doc\n}\n\nexport const find = async (collectionName, searchObj) => {\n  const collection = db.collection(collectionName)\n  const docs = await collection.find(searchObj).toArray()\n  return docs\n}\n\nexport const insertOne = async (collectionName, doc) => {\n  const collection = db.collection(collectionName)\n  collection.insertOne(doc, (err, r) => {\n    if(err){\n      throw new Error('insertOne failed!')\n    }\n\n    console.log(r.insertedCount)\n  })\n}\n\nexport const updateOne = async (collectionName, filter, updateObj) => {\n  const collection = db.collection(collectionName)\n  collection.updateOne(filter, {$set: updateObj}, (err, r) => {\n    if(err){\n      throw new Error(\"updateOne failed!\")\n    }\n\n    console.log(r.insertedCount)\n  })\n}\n\nexport const deleteOne = async (collectionName, id) => {\n  const collection = db.collection(collectionName)\n  collection.deleteOne({id}, (err, r) => {\n    if(err){\n      throw new Error(\"deleteOne failed!\")\n    }\n\n    console.log(r)\n  })\n}\n\nexport const deleteOneByObject = async (collectionName, object) => {\n  const collection = db.collection(collectionName)\n  collection.deleteOne(object, (err, r) => {\n    if(err){\n      throw new Error(\"deleteOneByObject failed!\")\n    }\n\n    console.log(r.deletedCount)\n  })\n}"]}