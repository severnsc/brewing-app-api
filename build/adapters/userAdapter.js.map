{"version":3,"sources":["../../adapters/userAdapter.js"],"names":["findUserById","findUserByUsername","findUserByEmail","userExists","isUsernameUnique","isEmailUnique","_createUser","hashPassword","compareHash","saveUser","_deleteUser","updateUserPassword","process","env","NODE_ENV","makeUser","id","random","uuid","userName","internet","hashedPassword","password","email","Promise","resolve","word","user","username","catch","e","salt","genSaltSync","hash","hashSync","compareSync"],"mappings":"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","file":"userAdapter.js","sourcesContent":["import faker from 'faker'\n\nimport bcrypt from 'bcrypt'\n\nimport {\n  find,\n  findOne,\n  insertOne,\n  updateOne,\n  deleteOne\n} from './databaseAdapter'\n\nlet findUserById\nlet findUserByUsername\nlet findUserByEmail\nlet userExists\nlet isUsernameUnique\nlet isEmailUnique\nlet _createUser\nlet hashPassword\nlet compareHash\nlet saveUser\nlet _deleteUser\nlet updateUserPassword\n\nif(process.env.NODE_ENV === 'dev'){\n\n  const makeUser = () => ({\n    id: faker.random.uuid(),\n    userName: faker.internet.userName(),\n    hashedPassword: faker.internet.password(),\n    email: faker.internet.email()\n  })\n\n  findUserById = id => ({\n    id,\n    userName: faker.internet.userName(),\n    hashedPassword: faker.internet.password(),\n    email: faker.internet.email()\n  })\n\n  findUserByUsername = userName => ({\n    id: \"1\",\n    userName,\n    hashedPassword: faker.internet.password(),\n    email: faker.internet.email()\n  })\n\n  findUserByEmail = email => ({\n    id: \"1\",\n    userName: faker.internet.userName(),\n    hashedPassword: faker.internet.password(),\n    email\n  })\n\n  userExists = id => true\n\n  isUsernameUnique = () => Promise.resolve(true)\n\n  isEmailUnique = () => true\n\n  _createUser = () => {}\n\n  hashPassword = word => word\n\n  compareHash = () => true\n\n  saveUser = () => {}\n\n  _deleteUser = () => {}\n}else{\n  findUserById = async id => {\n    const user = await findOne('users', {id})\n    return user\n  }\n\n  findUserByUsername = async userName => {\n    const user = await findOne('users', {userName})\n    return user\n  }\n\n  findUserByEmail = async email => {\n    const user = await findOne('users', {email})\n    return user\n  }\n\n  userExists = async id => {\n    const user = await findUserById(id)\n    return user ? true : false\n  }\n\n  isUsernameUnique = async username => {\n    const user = await findOne('users', {userName: username}).catch(e => e)\n    return user ? false : true\n  }\n\n  isEmailUnique = async email => {\n    const user = await findOne('users', {email: email}).catch(e => e)\n    return user ? false : true\n  }\n\n  _createUser = async user => {\n    insertOne('users', user)\n  }\n\n  hashPassword = password => {\n    const salt = bcrypt.genSaltSync(10)\n    const hash = bcrypt.hashSync(password, salt)\n    return hash\n  }\n\n  compareHash = (password, hash) => {\n    return bcrypt.compareSync(password, hash)\n  }\n\n  saveUser = async user => {\n    updateOne(\"users\", {id: user.id}, user)\n  }\n\n  _deleteUser = async id => {\n    deleteOne(\"users\", id)\n  }\n}\n\nexport {findUserById}\nexport {findUserByUsername}\nexport {findUserByEmail}\nexport {userExists}\nexport {isUsernameUnique}\nexport {isEmailUnique}\nexport {_createUser}\nexport {hashPassword}\nexport {compareHash}\nexport {saveUser}\nexport {_deleteUser}"]}