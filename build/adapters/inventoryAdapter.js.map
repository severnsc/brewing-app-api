{"version":3,"sources":["../../adapters/inventoryAdapter.js"],"names":["findInventoriesByUserId","findInventoryById","_createInventory","saveInventory","_deleteInventory","process","env","NODE_ENV","makeInventoryItem","id","random","uuid","inventoryId","object","JSON","stringify","name","word","quantityUnit","currentQuantity","number","reorderQuantity","reorderThreshold","costUnit","unitCost","reorderCost","lastReorderDate","date","past","deliveryDate","future","createdAt","updatedAt","fakeItems","length","push","userId","items","inventories","inventory"],"mappings":"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","file":"inventoryAdapter.js","sourcesContent":["import faker from 'faker'\n\nimport {\n  find,\n  findOne,\n  insertOne,\n  updateOne,\n  deleteOne\n} from './databaseAdapter'\n\nlet findInventoriesByUserId \n\nlet findInventoryById \n\nlet _createInventory \n\nlet saveInventory \n\nlet _deleteInventory \n\nif(process.env.NODE_ENV === 'dev'){\n\n  const makeInventoryItem = () => ({\n    id: faker.random.uuid(),\n    inventoryId: \"1\",\n    object: JSON.stringify({\n        name: faker.random.word()\n      }),\n    quantityUnit: \"lbs\",\n    currentQuantity: faker.random.number(),\n    reorderQuantity: faker.random.number(),\n    reorderThreshold: faker.random.number(),\n    costUnit: \"USD\",\n    unitCost: faker.random.number(),\n    reorderCost: faker.random.number(),\n    lastReorderDate: faker.date.past(),\n    deliveryDate: faker.date.future(),\n    createdAt: faker.date.past(),\n    updatedAt: faker.date.past()\n  })\n\n  let fakeItems = []\n  while(fakeItems.length < 200){\n    fakeItems.push(makeInventoryItem())\n  }\n\n  findInventoriesByUserId = () => {\n    return [\n      {\n        id: \"1\",\n        userId: \"1\",\n        name: \"test inventory\",\n        items: fakeItems\n      },\n      {\n        id: \"2\",\n        userId: \"1\",\n        name: \"Malt\",\n        items: fakeItems\n      },\n      {\n        id: \"3\",\n        userId: \"1\",\n        name: \"Hops\",\n        items: fakeItems\n      },\n      {\n        id: \"4\",\n        userId: \"1\",\n        name: \"Yeast\",\n        items: fakeItems\n      }\n    ]\n  }\n\n  findInventoryById = id => ({\n    id,\n    userId: \"1\",\n    name: faker.random.word(),\n    items: fakeItems\n  })\n\n  _createInventory = () => {}\n\n  saveInventory = () => {}\n\n  _deleteInventory = () => {}\n}else{\n  findInventoriesByUserId = async userId => {\n    const inventories = await find('inventories', {userId})\n    return inventories\n  }\n\n  findInventoryById = async id => {\n    const inventory = await findOne('inventories', {id})\n    return inventory\n  }\n\n  _createInventory = async inventory => {\n    insertOne(\"inventories\", inventory)\n  }\n\n  saveInventory = async inventory => {\n    updateOne(\"inventories\", {id: inventory.id}, inventory)\n  }\n\n  _deleteInventory = async id => {\n    deleteOne(\"inventories\", id)\n  }\n}\n\n\nexport {findInventoryById}\nexport {findInventoriesByUserId}\nexport {_createInventory}\nexport {saveInventory}\nexport {_deleteInventory}"]}