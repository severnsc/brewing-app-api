{"version":3,"sources":["../../adapters/timerAdapter.js"],"names":["findTimerById","findTimersByUserId","timerExists","_createTimer","saveTimer","_deleteTimer","findStartedTimers","process","env","NODE_ENV","makeTimer","id","random","uuid","userId","name","word","duration","number","remainingDuration","intervalDuration","isRunning","fakeTimers","length","push","timer","Object","assign","timers"],"mappings":"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","file":"timerAdapter.js","sourcesContent":["import faker from 'faker'\n\nimport {\n  find,\n  findOne,\n  insertOne,\n  updateOne,\n  deleteOne\n} from './databaseAdapter'\n\nlet findTimerById\nlet findTimersByUserId\nlet timerExists\nlet _createTimer\nlet saveTimer\nlet _deleteTimer\nlet findStartedTimers\n\nif(process.env.NODE_ENV === 'dev'){\n\n  const makeTimer = () => ({\n    id: faker.random.uuid(),\n    userId: \"1\",\n    name: faker.random.word(),\n    duration: faker.random.number(),\n    remainingDuration: faker.random.number(),\n    intervalDuration: faker.random.number(),\n    isRunning: false\n  })\n\n  let fakeTimers = []\n  while(fakeTimers.length < 50){\n    fakeTimers.push(makeTimer())\n  }\n\n  findTimersByUserId = () => fakeTimers\n\n  findTimerById = id => {\n    const timer = makeTimer()\n    return Object.assign({}, timer, { id })\n  }\n\n  timerExists = () => true\n\n  _createTimer = () => {}\n\n  saveTimer = () => {}\n\n  _deleteTimer = () => {}\n}else{\n  findTimersByUserId = async userId => {\n    const timers = await find('timers', {userId})\n    return timers\n  }\n\n  findTimerById = async id => {\n    const timer = findOne('timers', {id})\n    return timer\n  }\n\n  findStartedTimers = async () => {\n    const timers = await find(\"timers\", {isRunning: true})\n    return timers\n  }\n\n  _createTimer = async timer => {\n    insertOne(\"timers\", timer)\n  }\n\n  saveTimer = async timer => {\n    updateOne(\"timers\", {id: timer.id}, timer)\n  }\n\n  _deleteTimer = async id => {\n    deleteOne(\"timers\", id)\n  }\n}\n\nexport {findTimerById}\nexport {findTimersByUserId}\nexport {findStartedTimers}\nexport {timerExists}\nexport {_createTimer}\nexport {saveTimer}\nexport {_deleteTimer}"]}