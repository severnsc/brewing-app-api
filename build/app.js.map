{"version":3,"sources":["../app.js"],"names":["MongoDBStore","require","LocalStrategy","Strategy","use","username","password","done","then","user","catch","e","message","app","store","uri","process","env","DB_URL","databaseName","collection","on","console","log","error","secure","NODE_ENV","json","secret","SECRET","resave","saveUninitialized","urlencoded","extended","initialize","session","origin","credentials","serializeUser","id","deserializeUser","ensureAuth","req","res","next","isAuthenticated","sendStatus","schema","context","endpointURL","get","status","send","logout","fullUrl","headers","referer","baseUrl","split","redirect","post","token","decodeURIComponent","query","email","result","Date","now","expires","hashedPassword","body","userName","callbackURL","isEmail","login","err","url","resetToken","tokenHash","bool","authenticate","successRedirect","failureRedirect"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AACA,IAAMA,eAAeC,QAAQ,yBAAR,2BAArB;AACA,IAAMC,gBAAgBD,QAAQ,gBAAR,EAA0BE,QAAhD;;AAEA,mBAASC,GAAT,CAAa,IAAIF,aAAJ,CACX,UAACG,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA8B;AAC5B,iCAAiBF,QAAjB,EAA2BC,QAA3B,EAAqCE,IAArC,CAA0C,gBAAQ;AAChD,WAAOD,KAAK,IAAL,EAAWE,IAAX,CAAP;AACD,GAFD,EAEGC,KAFH,CAES,aAAK;AACZ,QAAGC,EAAEC,OAAF,KAAc,8CAAjB,EAAgE;AAC9D,aAAOL,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACK,SAAS,8BAAV,EAAlB,CAAP;AACD,KAFD,MAEK;AACH,aAAOL,KAAKI,CAAL,CAAP;AACD;AACF,GARD;AASD,CAXU,CAAb;;AAcA,IAAME,MAAM,wBAAZ;;AAEA,IAAMC,QAAQ,IAAId,YAAJ,CAAiB;AAC7Be,OAAKC,QAAQC,GAAR,CAAYC,MADY;AAE7BC,gBAAc,gBAFe;AAG7BC,cAAY;AAHiB,CAAjB,CAAd;;AAMAN,MAAMO,EAAN,CAAS,OAAT,EAAkB,iBAAS;AACzBC,UAAQC,GAAR,CAAYC,KAAZ;AACD,CAFD;;AAIA,IAAMC,SAAST,QAAQC,GAAR,CAAYS,QAAZ,KAAyB,KAAxC;AACAb,IAAIT,GAAJ,CAAQ,qBAAWuB,IAAX,EAAR;AACAd,IAAIT,GAAJ,CAAQ,8BAAQ;AACdwB,UAAQZ,QAAQC,GAAR,CAAYY,MADN;AAEdC,UAAQ,KAFM;AAGdC,qBAAmB,KAHL;AAIdjB,SAAOA,KAJO;AAKdW,UAAQA;AALM,CAAR,CAAR;AAOAZ,IAAIT,GAAJ,CAAQ,qBAAW4B,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACApB,IAAIT,GAAJ,CAAQ,mBAAS8B,UAAT,EAAR;AACArB,IAAIT,GAAJ,CAAQ,mBAAS+B,OAAT,EAAR;AACAtB,IAAIT,GAAJ,CAAQ,oBAAK,EAACgC,QAAQ,uBAAT,EAAkCC,aAAa,IAA/C,EAAL,CAAR;;AAEA,mBAASC,aAAT,CAAuB,UAAC7B,IAAD,EAAOF,IAAP,EAAgB;AACrCe,UAAQC,GAAR,CAAY,eAAZ;AACAhB,OAAK,IAAL,EAAWE,KAAK8B,EAAhB;AACD,CAHD;;AAKA,mBAASC,eAAT,CAAyB,UAACD,EAAD,EAAKhC,IAAL,EAAc;AACrCe,UAAQC,GAAR,CAAY,yBAAZ;AACA,wBAAQgB,EAAR,EAAY/B,IAAZ,CAAiB,gBAAQ;AACvBD,SAAK,IAAL,EAAWE,IAAX;AACD,GAFD,EAEGC,KAFH,CAES,aAAK;AACZH,SAAKI,CAAL;AACD,GAJD;AAKD,CAPD;;AASA,IAAM8B,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAGF,IAAIG,eAAJ,EAAH,EAAyB;AACvBD;AACD,GAFD,MAEK;AACHD,QAAIG,UAAJ,CAAe,GAAf;AACD;AACF,CAND;;AAQAjC,IAAIT,GAAJ,CAAQ,UAAR,EAAoBqC,UAApB,EAAgC,qBAAWd,IAAX,EAAhC,EAAmD,yCAAe,eAAO;AACvE,SAAO,EAAEoB,wBAAF,EAAUC,SAAS,EAACvC,MAAMiC,IAAIjC,IAAX,EAAnB,EAAP;AACD,CAFkD,CAAnD;;AAIAI,IAAIT,GAAJ,CAAQ,WAAR,EAAqB,0CAAgB,EAAE6C,aAAa,UAAf,EAAhB,CAArB;;AAEApC,IAAIqC,GAAJ,CAAQ,GAAR,EAAa,UAACR,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIG,UAAJ,CAAe,GAAf;AACD,CAFD;;AAIAjC,IAAIqC,GAAJ,CAAQ,QAAR,EAAkB,UAACR,GAAD,EAAMC,GAAN,EAAc;AAC9BA,MAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD,CAFD;;AAIAvC,IAAIqC,GAAJ,CAAQ,SAAR,EAAmB,UAACR,GAAD,EAAMC,GAAN,EAAc;AAC/BD,MAAIW,MAAJ;AACA,MAAMC,UAAUZ,IAAIa,OAAJ,CAAYC,OAA5B;AACA,MAAMC,UAAUH,QAAQI,KAAR,CAAc,gBAAd,EAAgC,CAAhC,CAAhB;AACAf,MAAIgB,QAAJ,CAAaF,OAAb;AACD,CALD;;AAOA5C,IAAI+C,IAAJ,CAAS,YAAT,EAAuB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAMkB,QAAQC,mBAAmBpB,IAAIqB,KAAJ,CAAUF,KAA7B,CAAd;AACA,MAAMG,QAAQF,mBAAmBpB,IAAIqB,KAAJ,CAAUC,KAA7B,CAAd;AACA,8BAASH,KAAT,EAAgBrD,IAAhB;AAAA,uEAAqB,iBAAMyD,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAChBA,MADgB;AAAA;AAAA;AAAA;;AAAA,oBAEdA,OAAOD,KAAP,KAAiBA,KAAjB,IAA0BE,KAAKC,GAAL,KAAaF,OAAOG,OAFhC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGI,kCAAgBJ,KAAhB,EAAuBtD,KAAvB,CAA6B;AAAA,uBAAKC,CAAL;AAAA,eAA7B,CAHJ;;AAAA;AAGTF,kBAHS;AAIT4D,4BAJS,GAIQ,+BAAa3B,IAAI4B,IAAJ,CAAShE,QAAtB,CAJR;AAAA;AAAA,qBAKT,yBAAWG,KAAK8B,EAAhB,EAAoB,EAAC8B,8BAAD,EAApB,EAAsC3D,KAAtC,CAA4C;AAAA,uBAAKC,CAAL;AAAA,eAA5C,CALS;;AAAA;AAAA;AAAA,qBAMT,mCAAgBkD,KAAhB,EAAuBnD,KAAvB,CAA6B;AAAA,uBAAKC,CAAL;AAAA,eAA7B,CANS;;AAAA;AAOfW,sBAAQC,GAAR,CAAY,yBAAZ,EAAuCd,KAAK8D,QAA5C;AACA5B,kBAAIgB,QAAJ,CAAaM,OAAOO,WAApB;AARe;AAAA;;AAAA;AAUf7B,kBAAIgB,QAAJ,CAAaM,OAAOO,WAApB;;AAVe;AAAA;AAAA;;AAAA;AAajB7B,kBAAIgB,QAAJ,CAAajB,IAAIQ,GAAJ,CAAQ,QAAR,CAAb;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;AAgBD,CAnBD;;AAqBArC,IAAI+C,IAAJ,CAAS,SAAT,EAAoB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAG,CAAC,oBAAU8B,OAAV,CAAkB/B,IAAI4B,IAAJ,CAASN,KAA3B,CAAJ,EAAsC;AACpCrB,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD,GAFD,MAEK;AACH,6BAAWV,IAAI4B,IAAJ,CAASjE,QAApB,EAA8BqC,IAAI4B,IAAJ,CAAShE,QAAvC,EAAiDoC,IAAI4B,IAAJ,CAASN,KAA1D,EAAiExD,IAAjE,CAAsE,gBAAQ;AAC5EkC,UAAIgC,KAAJ,CAAUjE,IAAV,EAAgB,eAAO;AACrB,YAAGkE,GAAH,EAAQhC,IAAIG,UAAJ,CAAe,GAAf;AACRH,YAAIgB,QAAJ,CAAa,GAAb;AACD,OAHD;AAID,KALD,EAKGjD,KALH,CAKS;AAAA,aAAKiC,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAAWzC,CAAhC,CAAL;AAAA,KALT;AAMD;AACF,CAXD;;AAaAE,IAAI+C,IAAJ,CAAS,oBAAT,EAA+B,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC3C,uCAAmBD,IAAI4B,IAAJ,CAASjE,QAA5B,EAAsCG,IAAtC,CAA2C,gBAAQ;AACjD,QAAGC,IAAH,EAAQ;AACN,UAAMmE,MAAMlC,IAAIQ,GAAJ,CAAQ,QAAR,CAAZ;AACA,UAAM2B,aAAa,uCAAnB;AACA,UAAMC,YAAY,6BAAUD,UAAV,CAAlB;AACA,uCAAcpE,KAAKuD,KAAnB,EAA0Bc,SAA1B,EAAqCF,GAArC,EAA0CpE,IAA1C,CAA+C,YAAM;AACnD,6CAAkBC,KAAKuD,KAAvB,EAA8Ba,UAA9B,EAA0CD,GAA1C;AACAjC,YAAIG,UAAJ,CAAe,GAAf;AACD,OAHD,EAGGpC,KAHH,CAGS;AAAA,eAAKiC,IAAIG,UAAJ,CAAe,GAAf,CAAL;AAAA,OAHT;AAID,KARD,MAQK;AACHH,UAAIG,UAAJ,CAAe,GAAf;AACD;AACF,GAZD;AAaD,CAdD;;AAgBAjC,IAAI+C,IAAJ,CAAS,mBAAT,EAA8B,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC1C,qCAAiBD,IAAI4B,IAAJ,CAASjE,QAA1B,EAAoCG,IAApC,CAAyC,gBAAQ;AAC/CmC,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2B,IAArB;AACD,GAFD,EAEGrE,KAFH,CAES;AAAA,WAAKiC,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBzC,CAArB,CAAL;AAAA,GAFT;AAGD,CAJD;;AAMAE,IAAI+C,IAAJ,CAAS,QAAT,EAAmB,mBAASoB,YAAT,CAAsB,OAAtB,EAA+B;AAChDC,mBAAiB,GAD+B;AAEhDC,mBAAiB;AAF+B,CAA/B,CAAnB;;kBAKerE,G","file":"app.js","sourcesContent":["import express from 'express'\nimport session from \"express-session\"\nimport bodyParser from 'body-parser'\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express'\nimport schema from './schema'\nimport { createUser, authenticateUser, getUser, updateUser } from './compose'\nimport passport from 'passport'\nimport cors from 'cors'\nimport { isUsernameUnique, findUserByUsername, findUserByEmail, hashPassword } from './adapters/userAdapter'\nimport validator from 'validator'\nimport { generateResetToken, hashToken, saveResetHash, findHash, deleteResetHash } from './adapters/tokenAdapter'\nimport { sendRecoveryEmail } from './adapters/emailAdapter'\nconst MongoDBStore = require('connect-mongodb-session')(session)\nconst LocalStrategy = require('passport-local').Strategy\n\npassport.use(new LocalStrategy(\n  (username, password, done) => {\n    authenticateUser(username, password).then(user => {\n      return done(null, user)\n    }).catch(e => {\n      if(e.message === \"Could not find the user with given userName!\"){\n        return done(null, false, {message: \"Invalid username or password\"})\n      }else{\n        return done(e)\n      }\n    })\n  }\n));\n\nconst app = express()\n\nconst store = new MongoDBStore({\n  uri: process.env.DB_URL,\n  databaseName: 'brewing-app-db',\n  collection: \"sessions\"\n})\n\nstore.on('error', error => {\n  console.log(error)\n})\n\nconst secure = process.env.NODE_ENV !== 'dev'\napp.use(bodyParser.json())\napp.use(session({ \n  secret: process.env.SECRET,\n  resave: false,\n  saveUninitialized: false,\n  store: store,\n  secure: secure\n}));\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(cors({origin: \"http://localhost:3000\", credentials: true}))\n\npassport.serializeUser((user, done) => {\n  console.log(\"serializeUser\")\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  console.log(\"deserializeUser called!\")\n  getUser(id).then(user => {\n    done(null, user)\n  }).catch(e => {\n    done(e)\n  })\n});\n\nconst ensureAuth = (req, res, next) => {\n  if(req.isAuthenticated()){\n    next()\n  }else{\n    res.sendStatus(401)\n  }\n}\n\napp.use('/graphql', ensureAuth, bodyParser.json(), graphqlExpress(req => {\n  return { schema, context: {user: req.user} }\n}))\n\napp.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }))\n\napp.get('/', (req, res) => {\n  res.sendStatus(200)\n})\n\napp.get('/login', (req, res) => {\n  res.status(200).send(\"Please login\")\n})\n\napp.get('/logout', (req, res) => {\n  req.logout()\n  const fullUrl = req.headers.referer\n  const baseUrl = fullUrl.split(/[\\/][a-zA-Z]*$/)[0]\n  res.redirect(baseUrl)\n})\n\napp.post('/resetForm', (req, res) => {\n  const token = decodeURIComponent(req.query.token)\n  const email = decodeURIComponent(req.query.email)\n  findHash(token).then(async result => {\n    if(result){\n      if(result.email === email && Date.now() < result.expires){\n        const user = await findUserByEmail(email).catch(e => e)\n        const hashedPassword = hashPassword(req.body.password)\n        await updateUser(user.id, {hashedPassword}).catch(e => e)\n        await deleteResetHash(token).catch(e => e)\n        console.log(\"password reset for user\", user.userName)\n        res.redirect(result.callbackURL)\n      }else{\n        res.redirect(result.callbackURL)\n      }\n    }else{\n      res.redirect(req.get('origin'))\n    }\n  })\n})\n\napp.post('/signup', (req, res) => {\n  if(!validator.isEmail(req.body.email)){\n    res.status(400).send(\"Email invalid!\")\n  }else{\n    createUser(req.body.username, req.body.password, req.body.email).then(user => {\n      req.login(user, err => {\n        if(err) res.sendStatus(500)\n        res.redirect('/')\n      })\n    }).catch(e => res.status(500).send(\"Error!\" + e))\n  }\n})\n\napp.post('/sendRecoveryEmail', (req, res) => {\n  findUserByUsername(req.body.username).then(user => {\n    if(user){\n      const url = req.get('origin')\n      const resetToken = generateResetToken()\n      const tokenHash = hashToken(resetToken)\n      saveResetHash(user.email, tokenHash, url).then(() => {\n        sendRecoveryEmail(user.email, resetToken, url)\n        res.sendStatus(200)\n      }).catch(e => res.sendStatus(500))\n    }else{\n      res.sendStatus(200)\n    }\n  })\n})\n\napp.post('/isUsernameUnique', (req, res) => {\n  isUsernameUnique(req.body.username).then(bool => {\n    res.status(200).send(bool)\n  }).catch(e => res.status(500).send(e))\n})\n\napp.post('/login', passport.authenticate('local', { \n  successRedirect: '/',\n  failureRedirect: '/login'\n}))\n\nexport default app"]}